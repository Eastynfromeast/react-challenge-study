# Framer Motion 
    a production-ready motion library 

    Instead of using "@import css", using library such as "react-helmet-async"
   <HelmetProvider>
    <App>
        <Helmet>
            <title>Framer Motion</title>
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" />
            <link href="https://fonts.googleapis.com/css2?family=Source+Sans+3:ital,wght@0,200..900;1,200..900&display=swap" rel="stylesheet"></link>
            </Helmet>
        </App>
    </HelmetProvider>


    ## framer-motion
		styled(motion.div)

		it's all about props
			<Box transition={{ duration: 3 }} animate={{ borderRadius: "100px" }} />
			change props and specify all the physics!
		can move the configuration into a seperate object
			const myVars = {
				start: { scale: 0 },
				end: { scale: 1, rotateZ: 360, transition: { type: "spring", delay: 0.5 } },
			};

			<Box variants={myVars} initial="start" animate="end" />
        
        children inherits initinal value and animate value from the parent
            const boxVariants = {
                start: {
                    opacity: 0,
                    scale: 0.45,
                },
                end: {
                    opacity: 1,
                    scale: 1,
                    transition: {
                        type: "spring",
                        duration: 1,
                        bounce: 0.5,
                        delayChildren: 0.5,
                        staggerChildren: 0.2,
                    },
                },
            };

        Gestures
        const biggerBoxRef = useRef<HTMLDivElement>(null);
        
        return (
            <BiggerBox ref={biggerBoxRef}>
                <Box drag dragSnapToOrigin dragElastic={1} dragConstraints={biggerBoxRef} variants={boxVariants} whileHover="hover" whileTap="click" />
            </BiggerBox>
        );


        ## useTransform & scroll
        const x = useMotionValue(0);
        const rotateZ = useTransform(x, [-600, 600], [-360, +360]);
        const borderRadius = useTransform(x, [-600, 600], [0, 100]);
        const gradient = useTransform(
            x,
            [-600, 600],
            ["linear-gradient(135deg, rgb(136, 251, 255), rgb(39, 117, 100))", "linear-gradient(135deg, rgb(156, 136, 255), rgb(39, 60, 117))"]
        );
        const { scrollYProgress } = useScroll();
        const scale = useTransform(scrollYProgress, [0, 1], [1, 5]);
        return (
            <Wrapper style={{ background: gradient }}>
                <Box style={{ x, rotateZ, borderRadius, scale }} drag="x" dragSnapToOrigin />
            </Wrapper>
        );