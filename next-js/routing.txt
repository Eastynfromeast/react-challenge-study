# Defining Routes
    app
        page.tsx
        layout.tsx <- Next.js created for you

    how to add page in Next.js
        root segment 
            page.tsx
    => Just express it using the file system
    1. create a folder : to tell Next.JS this folder can potentially be a page
    2. provide a UI component to render in the folder => page.tsx inside the directory

    for visible page, create "page.tsx" file
        without page.tsx, the directory is just a path 

    can I put a file inside app folder? 
        yes, cuz it will not be rendered
        but you cannot access through URL without page.tsx

# Not Found Routes
    app / not-found.tsx
        function name is not important but what matter is the name of file! "not-found.tsx"

    usePathname only works in Client Components. Add the "use client" directive at the top of the file to use it.
    ==> just add "use client"; at the top of the code!

# SSR vs CSR
    Client Side Rendering
        normal React way
        disadvantages of CSR
            - what if the user is in the bad internet circumstances? => need to wait for the JS file to be downloaded
            - SEO problems
        there's a blink to wait for the JS
            No html inside the HTML root
        => Need JavaScript to see UI

    Server Side Rendering 
        React with frame works
        don't need to download JavaScript file since it has html inside
        "use client";
        => will be SSR components first

        All your components and pages will be rendered in backend first 
            don't need to use React to build UI (Hydration)
            rendering ? taking JS functions and turning into HTML that brower understands

# Hydration
    make dummy HTML turn into an React app 
    hard navigation 
        using anchor tag without JS\
        need to reload the whole page
    
    react has benn hydrated?
        bunch of anchors turned into React

    a dummy HTML with some UI
    immediately after framework starts to load - react, components
    application becomes a React app
    becomes interactive
    and we can do client side rendering

    /about-us --> Boring HTML --> :) ---> init(Boring HTML) 
    /about-us ---> <button>0</button> ---> :) ---> <button onClick

# "use Client"
    hydration part doesn't happen on some components
        only components becomes interactive are those have "use client" directive on the top
    components don't need to be interactive will not be hydrated with no "use client" directive

    "use client"; means ...
        rendered in backend 
        and hydrated in frontend

    everything without "use client" will be server components
        user needs to download less JavaScript and app gets faster!

    server components will bring huge differences when fetching data!

# Recap
    How Next.js render our application
		1. pre-render everything of our app on the backend FIRST (every components!)
		2. take all the components and turn it into boring HTML
		3. give non-interactive HTML to users after the user arrived our website
		4. initializing frame work and React JS
		5. Components that have "use client" will be hydrated == become interactive
			every component used to be hydrated on former Next.js

    use client directive
        tells Next.js the component will be hydrated
        means "also" rendered on the client side

    benefit of hydration?
        user needs to download "less"(tiny) JS code

    Can I have a client component inside a server component?
        Of course!


# layout : wrap the pages around
	  How it works?
      Next.js is first going to the layout components and rendering layout components
      What actually Next.js is rendering is...
        <Layout>
          <AboutUs />
        </Layout>
          {children} is a react thing 

      Everytime you change the page,
        Next.js renders layout
        and the page you want to go, gets put in the children prop of layout component

      Special thing of layout 
        we can make another layout file inside a directory
        layouts do not cancle each other == layout can be nested
          <Layout>
            <AboutUsLayout>
              <SalesLayout>
                <Sales/>
              </SalesLayout>
            </AboutUsLayout>
          </Layout>

    in the app directory
    general for all the page
      layout.tsx - uses for any folder
      not-found.tsx
      page.tsx

      route groups need to be (nameOfTheGroup)
        (home)
          page.tsx

          with (), Next.js does not create URL
            invisible for frame work

# meta-data
    will be show up in the head of HTML
    is "merged"
    only page or layout can export meta data
    meta data should be inside the server component

    template of meta data
      export const metadata: Metadata = {
        title: {
          template: "%s | Next Movies",
          default: "Loading...",
        },
        description: "The best movies on the best framework",
      };

#dynamic route
    how to do the same thing with react-router
    (movie)
      movies
        [id] --> square bracket !!
          page.tsx

    export default function MovieDetail(props) {
      console.log(props); --> this JS executed in the backend!
      // { params: { id: '1223' }, searchParams: {region:'kr'} }
      return <h1>Movie</h1>;
    }

    export default function MovieDetail({ 
      params: { id } }: { 
        params: { id: string } 
      }) {
      return <h1>Movie {id}</h1>;
    }

        
   
